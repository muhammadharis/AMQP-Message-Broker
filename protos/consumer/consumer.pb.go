// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/consumer/consumer.proto

package consumer

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ConsumerRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsumerRequest) Reset()         { *m = ConsumerRequest{} }
func (m *ConsumerRequest) String() string { return proto.CompactTextString(m) }
func (*ConsumerRequest) ProtoMessage()    {}
func (*ConsumerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e92dd3678396abb, []int{0}
}

func (m *ConsumerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumerRequest.Unmarshal(m, b)
}
func (m *ConsumerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumerRequest.Marshal(b, m, deterministic)
}
func (m *ConsumerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerRequest.Merge(m, src)
}
func (m *ConsumerRequest) XXX_Size() int {
	return xxx_messageInfo_ConsumerRequest.Size(m)
}
func (m *ConsumerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerRequest proto.InternalMessageInfo

func (m *ConsumerRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type ConsumerResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsumerResponse) Reset()         { *m = ConsumerResponse{} }
func (m *ConsumerResponse) String() string { return proto.CompactTextString(m) }
func (*ConsumerResponse) ProtoMessage()    {}
func (*ConsumerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e92dd3678396abb, []int{1}
}

func (m *ConsumerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumerResponse.Unmarshal(m, b)
}
func (m *ConsumerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumerResponse.Marshal(b, m, deterministic)
}
func (m *ConsumerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerResponse.Merge(m, src)
}
func (m *ConsumerResponse) XXX_Size() int {
	return xxx_messageInfo_ConsumerResponse.Size(m)
}
func (m *ConsumerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerResponse proto.InternalMessageInfo

func (m *ConsumerResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*ConsumerRequest)(nil), "ConsumerRequest")
	proto.RegisterType((*ConsumerResponse)(nil), "ConsumerResponse")
}

func init() { proto.RegisterFile("protos/consumer/consumer.proto", fileDescriptor_9e92dd3678396abb) }

var fileDescriptor_9e92dd3678396abb = []byte{
	// 142 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0x4f, 0xce, 0xcf, 0x2b, 0x2e, 0xcd, 0x4d, 0x2d, 0x82, 0x33, 0xf4, 0xc0, 0x12,
	0x4a, 0xca, 0x5c, 0xfc, 0xce, 0x50, 0x91, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x01,
	0x2e, 0x66, 0xef, 0xd4, 0x4a, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x10, 0x53, 0x49, 0x87,
	0x4b, 0x00, 0xa1, 0xa8, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48, 0x82, 0x8b, 0x3d, 0x37, 0xb5,
	0xb8, 0x38, 0x31, 0x3d, 0x15, 0xaa, 0x12, 0xc6, 0x35, 0x72, 0xe4, 0xe2, 0x86, 0xa9, 0x76, 0x0c,
	0xf0, 0x14, 0x32, 0xe2, 0xe2, 0x0c, 0x2e, 0x4d, 0x2a, 0x4e, 0x2e, 0xca, 0x4c, 0x4a, 0x15, 0x12,
	0xd0, 0x43, 0xb3, 0x4d, 0x4a, 0x50, 0x0f, 0xdd, 0x68, 0x03, 0xc6, 0x24, 0x36, 0xb0, 0xe3, 0x8c,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x40, 0xe8, 0xb2, 0x06, 0xbe, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConsumerAPIClient is the client API for ConsumerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConsumerAPIClient interface {
	Subscribe(ctx context.Context, in *ConsumerRequest, opts ...grpc.CallOption) (ConsumerAPI_SubscribeClient, error)
}

type consumerAPIClient struct {
	cc *grpc.ClientConn
}

func NewConsumerAPIClient(cc *grpc.ClientConn) ConsumerAPIClient {
	return &consumerAPIClient{cc}
}

func (c *consumerAPIClient) Subscribe(ctx context.Context, in *ConsumerRequest, opts ...grpc.CallOption) (ConsumerAPI_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ConsumerAPI_serviceDesc.Streams[0], "/ConsumerAPI/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &consumerAPISubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConsumerAPI_SubscribeClient interface {
	Recv() (*ConsumerResponse, error)
	grpc.ClientStream
}

type consumerAPISubscribeClient struct {
	grpc.ClientStream
}

func (x *consumerAPISubscribeClient) Recv() (*ConsumerResponse, error) {
	m := new(ConsumerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConsumerAPIServer is the server API for ConsumerAPI service.
type ConsumerAPIServer interface {
	Subscribe(*ConsumerRequest, ConsumerAPI_SubscribeServer) error
}

// UnimplementedConsumerAPIServer can be embedded to have forward compatible implementations.
type UnimplementedConsumerAPIServer struct {
}

func (*UnimplementedConsumerAPIServer) Subscribe(req *ConsumerRequest, srv ConsumerAPI_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterConsumerAPIServer(s *grpc.Server, srv ConsumerAPIServer) {
	s.RegisterService(&_ConsumerAPI_serviceDesc, srv)
}

func _ConsumerAPI_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConsumerAPIServer).Subscribe(m, &consumerAPISubscribeServer{stream})
}

type ConsumerAPI_SubscribeServer interface {
	Send(*ConsumerResponse) error
	grpc.ServerStream
}

type consumerAPISubscribeServer struct {
	grpc.ServerStream
}

func (x *consumerAPISubscribeServer) Send(m *ConsumerResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ConsumerAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ConsumerAPI",
	HandlerType: (*ConsumerAPIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _ConsumerAPI_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/consumer/consumer.proto",
}
